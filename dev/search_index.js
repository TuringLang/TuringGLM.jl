var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API reference","title":"API reference","text":"CurrentModule = TuringGLM","category":"page"},{"location":"api/#TuringGLM","page":"API reference","title":"TuringGLM","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"Documentation for TuringGLM.","category":"page"},{"location":"api/","page":"API reference","title":"API reference","text":"","category":"page"},{"location":"api/","page":"API reference","title":"API reference","text":"Modules = [TuringGLM]","category":"page"},{"location":"api/#TuringGLM.CustomPrior","page":"API reference","title":"TuringGLM.CustomPrior","text":"CustomPrior(predictors, intercept, auxiliary)\n\nstruct to hold information regarding user-specified custom priors.\n\nUsage\n\nThe CustomPrior struct has 3 fields:\n\npredictors: the β coefficients.\nintercept: the α intercept.\nauxiliary: an auxiliary parameter.\n\nIn robust models, e.g. Linear Regression with Student-t likelihood or Count Regression with Negative Binomial likelihood, often there is an extra auxiliary parameter that is needed to parametrize to model to overcome under- or over-dispersion. If you are specifying a custom prior for one of these type of models, then you should also specify a prior for the auxiliary parameter.\n\nNon-robust models do not need an auxiliary parameter and you can pass nothing as the auxiliary argument.\n\n\n\n\n\n","category":"type"},{"location":"api/#TuringGLM.NegativeBinomial2-Union{Tuple{T}, Tuple{T, T}} where T<:Real","page":"API reference","title":"TuringGLM.NegativeBinomial2","text":"NegativeBinomial2(μ, ϕ)\n\nAn alternative parameterization of the Negative Binomial distribution:\n\ntextNegative-Binomial(n mid mu phi) sim binomn + phi - 1n left( fracmumu + phi right)^n left( fracphimu + phi right)^phi\n\nwhere the expectation is μ and variance is (μ + μ²/ϕ).\n\nThe alternative parameterization is inspired by the Stan's neg_binomial_2 function.\n\n\n\n\n\n","category":"method"},{"location":"api/#TuringGLM.center_predictors-Tuple{AbstractMatrix{T} where T}","page":"API reference","title":"TuringGLM.center_predictors","text":"center_predictors(X::AbstractMatrix)\n\nCenters the columns of a matrix X of predictors to mean 0.\n\nReturns a tuple with:\n\nμ_X: 1xK Matrix of Float64s of the means of the K columns in the original X\n\nmatrix.\n\nX_centered: A Matrix of Float64s with the same dimensions as the original matrix\n\nX with the columns centered on mean μ=0.\n\nArguments\n\nX::AbstractMatrix: a matrix of predictors where rows are observations and columns are\n\nvariables.\n\n\n\n\n\n","category":"method"},{"location":"api/#TuringGLM.convert_str_to_indices-Tuple{AbstractVector{T} where T}","page":"API reference","title":"TuringGLM.convert_str_to_indices","text":"convert_str_to_indices(v::AbstractVector)\n\nConverts a vector v to a vector of indices, i.e. a vector where all the entries are integers. Returns a tuple with the first element as the converted vector and the second element a Dict specifying which string is which integer.\n\nThis function is especially useful for random-effects varying-intercept hierarchical models. Normally v would be a vector of group membership with values such as \"group_1\", \"group_2\" etc. For random-effect models with varying-intercepts, Turing needs the group membership values to be passed as Ints.\n\n\n\n\n\n","category":"method"},{"location":"api/#TuringGLM.data_fixed_effects-Union{Tuple{D}, Tuple{StatsModels.FormulaTerm, D}} where D","page":"API reference","title":"TuringGLM.data_fixed_effects","text":"data_fixed_effects(formula::FormulaTerm, data)\n\nConstructs the matrix X of fixed-effects (a.k.a. population-level) predictors.\n\nReturns a Matrix of the fixed-effects predictors variables in the formula and present inside data.\n\nArguments\n\nformula: a FormulaTerm created by @formula macro.\ndata:  a data object that satisfies the\n\nTables.jl interface such as a DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"api/#TuringGLM.data_random_effects-Union{Tuple{D}, Tuple{StatsModels.FormulaTerm, D}} where D","page":"API reference","title":"TuringGLM.data_random_effects","text":"data_random_effects(formula::FormulaTerm, data)\n\nConstructs the vector(s)/matrix(ces) Z(s) of random-effects (a.k.a. group-level) slope predictors.\n\nReturns a Dict{String, AbstractArray} of Vector/Matrix as values of the random-effects predictors slope variables (keys) in the formula and present inside data.\n\nArguments\n\nformula: a FormulaTerm created by @formula macro.\ndata:  a data object that satisfies the\n\nTables.jl interface such as a DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"api/#TuringGLM.data_response-Union{Tuple{D}, Tuple{StatsModels.FormulaTerm, D}} where D","page":"API reference","title":"TuringGLM.data_response","text":"data_response(formula::FormulaTerm, data)\n\nConstructs the response y vector.\n\nReturns a Vector of the response variable in the formula and present inside data.\n\nArguments\n\nformula: a FormulaTerm created by @formula macro.\ndata:  a data object that satisfies the\n\nTables.jl interface such as a DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"api/#TuringGLM.get_idx-Union{Tuple{D}, Tuple{StatsModels.Term, D}} where D","page":"API reference","title":"TuringGLM.get_idx","text":"get_idx(term::Term, data)\n\nReturns a tuple with the first element as the ID vector of Ints that represent group membership for a specific random-effect intercept group t of observations present in data. The second element of the tuple is a Dict specifying which string is which integer in the ID vector.\n\n\n\n\n\n","category":"method"},{"location":"api/#TuringGLM.get_var-Union{Tuple{D}, Tuple{StatsModels.Term, D}} where D","page":"API reference","title":"TuringGLM.get_var","text":"get_var(term::Term, data)\n\nReturns the corresponding vector of column in data for the a specific random-effect slope term of observations present in data.\n\n\n\n\n\n","category":"method"},{"location":"api/#TuringGLM.has_ranef-Tuple{StatsModels.FormulaTerm}","page":"API reference","title":"TuringGLM.has_ranef","text":"has_ranef(formula::FormulaTerm)\n\nReturns true if any of the terms in formula is a FunctionTerm or false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"api/#TuringGLM.intercept_per_ranef-Tuple{Tuple}","page":"API reference","title":"TuringGLM.intercept_per_ranef","text":"intercept_per_ranef(terms::Tuple{RandomEffectsTerm})\n\nReturns a vector of Strings where the entries are the grouping variables that have a group-level intercept.\n\n\n\n\n\n","category":"method"},{"location":"api/#TuringGLM.n_ranef-Tuple{StatsModels.FormulaTerm}","page":"API reference","title":"TuringGLM.n_ranef","text":"n_ranef(formula::FormulaTerm)\n\nReturns the number of RandomEffectsTerms in formula.\n\n\n\n\n\n","category":"method"},{"location":"api/#TuringGLM.ranef-Tuple{StatsModels.FormulaTerm}","page":"API reference","title":"TuringGLM.ranef","text":"ranef(formula::FormulaTerm)\n\nReturns a tuple of the FunctionTerms parsed as RandomEffectsTerms in formula. If there are no FunctionTerms in formula returns nothing.\n\n\n\n\n\n","category":"method"},{"location":"api/#TuringGLM.slope_per_ranef-Tuple{Tuple}","page":"API reference","title":"TuringGLM.slope_per_ranef","text":"slope_per_ranef(terms::Tuple{RandomEffectsTerm})\n\nReturns a SlopePerRanEf object where the entries are the grouping variables that have a group-level slope.\n\n\n\n\n\n","category":"method"},{"location":"api/#TuringGLM.standardize_predictors-Tuple{AbstractMatrix{T} where T}","page":"API reference","title":"TuringGLM.standardize_predictors","text":"standardize_predictors(X::AbstractMatrix)\n\nStandardizes the columns of a matrix X of predictors to mean 0 and standard deviation 1.\n\nReturns a tuple with:\n\nμ_X: 1xK Matrix of Float64s of the means of the K columns in the original X\n\nmatrix.\n\nσ_X: 1xK Matrix of Float64s of the standard deviations of the K columns in the\n\noriginal X matrix.\n\nX_std: A Matrix of Float64s with the same dimensions as the original matrix\n\nX with the columns centered on mean μ=0 and standard deviation σ=1.\n\nArguments\n\nX::AbstractMatrix: a matrix of predictors where rows are observations and columns are\n\nvariables.\n\n\n\n\n\n","category":"method"},{"location":"api/#TuringGLM.standardize_predictors-Tuple{AbstractVector{T} where T}","page":"API reference","title":"TuringGLM.standardize_predictors","text":"standardize_predictors(x::AbstractVector)\n\nStandardizes the vector x to mean 0 and standard deviation 1.\n\nReturns a tuple with:\n\nμ_X: Float64s of the mean of the original vector x.\nσ_X: Float64s of the standard deviations of the original vector x.\nx_std: A Vector of Float64s with the same length as the original vector\n\nx with the values centered on mean μ=0 and standard deviation σ=1.\n\nArguments\n\nx::AbstractVector: a vector.\n\n\n\n\n\n","category":"method"},{"location":"api/#TuringGLM.tuple_length-Union{Tuple{Tuple{Vararg{Any, N}}}, Tuple{N}} where N","page":"API reference","title":"TuringGLM.tuple_length","text":"tuple_length(::NTuple{N, Any}) where {N} = Int(N)\n\nThis is a hack to get the length of any tuple.\n\n\n\n\n\n","category":"method"},{"location":"api/#TuringGLM.turing_model-Union{Tuple{D}, Tuple{StatsModels.FormulaTerm, D}} where D","page":"API reference","title":"TuringGLM.turing_model","text":"turing_model(formula, data; model=Gaussian(), priors=DefaultPrior(), standardize=false)\nturing_model(formula, data, model; priors=DefaultPrior(), standardize=false)\n\nCreate a Turing model using formula syntax and a data source.\n\nformula\n\nformula is the the same friendly interface to specify used to specify statistical models by brms, rstarnarm, bambi, StatsModels.jl and MixedModels.jl. The syntax is done by using the @formula macro and then specifying the dependent variable followed by a tilde ~ then the independent variables separated by a plus sign +.\n\nExample: @formula(y ~ x1 + x2 + x3).\n\nModerations/interactions can be specified with the asterisk sign *, e.g. x1 * x2. This will be expanded to x1 + x2 + x1:x2, which, following the principle of hierarchy, the main effects must also be added along with the interaction effects. Here x1:x2 means that the values of x1 will be multiplied (interacted) with the values of x2.\n\nRandom-effects (a.k.a. group-level effects) can be specified with the (term | group) inside the @formula, where term is the independent variable and group is the categorical representation (i.e., either a column of Strings or a CategoricalArray in data). You can specify a random-intercept with (1 | group).\n\nExample: @formula(y ~ (1 | group) + x1).\n\nNotice: random-effects are currently only implemented for a single group-level intercept. Future versions of TuringGLM.jl will support slope random-effects and multiple group-level effets.\n\ndata\n\ndata can be any Tables.jl-compatible data interface. The most popular ones are DataFrames and NamedTuples.\n\nmodel\n\nmodel represents the likelihood function which you want to condition your data on. Currently, TuringGLM.jl supports:\n\nGaussian() (the default if not specified): linear regression\nStudent(): robust linear regression\nLogistic(): logistic regression\nPois(): Poisson count data regression\nNegBin(): negative binomial robust count data regression\n\npriors\n\nTuringGLM.jl comes with state-of-the-art default priors, based on the literature and the Stan community. By default, turing_model will use DefaultPrior. But you can specify your own with priors=CustomPrior(predictors, intercept, auxiliary). All models take a predictors and intercept priors.\n\nIn robust models, e.g. Linear Regression with Student-t likelihood or Count Regression with Negative Binomial likelihood, often there is an extra auxiliary parameter that is needed to parametrize to model to overcome under- or over-dispersion. If you are specifying a custom prior for one of these type of models, then you should also specify a prior for the auxiliary parameter.\n\nNon-robust models do not need an auxiliary parameter and you can pass nothing as the auxiliary argument.\n\nExample for a non-robust model: @formula(y, ...), data; priors=CustomPrior(Normal(0, 2.5), Normal(10, 5), nothing)\n\nExample for a robust model: @formula(y, ...), data; priors=CustomPrior(Normal(0, 2.5), Normal(10, 5), Exponential(1))\n\nstandardize\n\nWhether true or false to standardize your data to mean 0 and standard deviation 1 before inference. Some science fields prefer to analyze and report effects in terms of standard devations. Also, whenever measurement scales differs, it is often suggested to standardize the effects for better comparison. By default, turing_model sets standardize=false.\n\n\n\n\n\n","category":"method"},{"location":"tutorials/robust_regression/#Robust-Regression","page":"Robust Regression","title":"Robust Regression","text":"","category":"section"},{"location":"tutorials/robust_regression/","page":"Robust Regression","title":"Robust Regression","text":"# Auto generated file. Do not modify.","category":"page"},{"location":"tutorials/robust_regression/","page":"Robust Regression","title":"Robust Regression","text":"<!-- PlutoStaticHTML.Begin -->\n<!--\n    # This information is used for caching.\n    [PlutoStaticHTML.State]\n    input_sha = \"82c7e3aa7460816c54cf75cde851537479a6c7836fac5cee7dd729faca8cf96d\"\n    julia_version = \"1.6.5\"\n-->\n\n\n\n\n<div class=\"markdown\"><p>For the <strong>Robust Regression</strong> with Student-<span class=\"tex\">$t$</span> distribution as the likelihood, we&#39;ll use a famous dataset called <code>kidiq</code> &#40;Gelman &amp; Hill, 2007&#41;, which is data from a survey of adult American women and their respective children. Dated from 2007, it has 434 observations and 4 variables:</p>\n<ul>\n<li><p><code>kid_score</code>: child&#39;s IQ</p>\n</li>\n<li><p><code>mom_hs</code>: binary/dummy &#40;0 or 1&#41; if the child&#39;s mother has a high school diploma</p>\n</li>\n<li><p><code>mom_iq</code>: mother&#39;s IQ</p>\n</li>\n<li><p><code>mom_age</code>: mother&#39;s age</p>\n</li>\n</ul>\n</div>\n\n<pre><code class=\"language-julia\">using CSV</code></pre>\n\n\n<pre><code class=\"language-julia\">using DataFrames</code></pre>\n\n\n<pre><code class=\"language-julia\">url = \"https://github.com/TuringLang/TuringGLM.jl/raw/main/data/kidiq.csv\"</code></pre>\n<pre><code class=\"code-output\">\"https://github.com/TuringLang/TuringGLM.jl/raw/main/data/kidiq.csv\"</code></pre>\n\n<pre><code class=\"language-julia\">kidiq = CSV.read(download(url), DataFrame)</code></pre>\n<table>\n<tr>\n<th>kid_score</th>\n<th>mom_hs</th>\n<th>mom_iq</th>\n<th>mom_age</th>\n</tr>\n<tr>\n<td>65</td>\n<td>1</td>\n<td>121.118</td>\n<td>27</td>\n</tr>\n<tr>\n<td>98</td>\n<td>1</td>\n<td>89.3619</td>\n<td>25</td>\n</tr>\n<tr>\n<td>85</td>\n<td>1</td>\n<td>115.443</td>\n<td>27</td>\n</tr>\n<tr>\n<td>83</td>\n<td>1</td>\n<td>99.4496</td>\n<td>25</td>\n</tr>\n<tr>\n<td>115</td>\n<td>1</td>\n<td>92.7457</td>\n<td>27</td>\n</tr>\n<tr>\n<td>98</td>\n<td>0</td>\n<td>107.902</td>\n<td>18</td>\n</tr>\n<tr>\n<td>69</td>\n<td>1</td>\n<td>138.893</td>\n<td>20</td>\n</tr>\n<tr>\n<td>106</td>\n<td>1</td>\n<td>125.145</td>\n<td>23</td>\n</tr>\n<tr>\n<td>102</td>\n<td>1</td>\n<td>81.6195</td>\n<td>24</td>\n</tr>\n<tr>\n<td>95</td>\n<td>1</td>\n<td>95.0731</td>\n<td>19</td>\n</tr>\n<tr>\n<td>...</td>\n</tr>\n<tr>\n<td>70</td>\n<td>1</td>\n<td>91.2533</td>\n<td>25</td>\n</tr>\n</table>\n\n\n<pre><code class=\"language-julia\">using TuringGLM</code></pre>\n\n\n\n<div class=\"markdown\"><p>Using <code>kid_score</code> as dependent variable and <code>mom_hs</code> along with <code>mom_iq</code> as independent variables with a moderation &#40;interaction&#41; effect:</p>\n</div>\n\n<pre><code class=\"language-julia\">fm = @formula(kid_score ~ mom_hs * mom_iq)</code></pre>\n<pre><code class=\"code-output\">FormulaTerm\nResponse:\n  kid_score(unknown)\nPredictors:\n  mom_hs(unknown)\n  mom_iq(unknown)\n  mom_hs(unknown) & mom_iq(unknown)</code></pre>\n\n\n<div class=\"markdown\"><p>We instantiate our model with <code>turing_model</code> passing a third argument <code>Student&#40;&#41;</code> to indicate that the model is a robust regression with the Student&#39;s t-distribution:</p>\n</div>\n\n<pre><code class=\"language-julia\">model = turing_model(fm, kidiq, Student());</code></pre>\n\n\n<pre><code class=\"language-julia\">chn = sample(model, NUTS(), 2_000);</code></pre>\n\n\n<pre><code class=\"language-julia\">describe(chn)[1]</code></pre>\n<table>\n<tr>\n<th>parameters</th>\n<th>mean</th>\n<th>std</th>\n<th>naive_se</th>\n<th>mcse</th>\n<th>ess</th>\n<th>rhat</th>\n<th>ess_per_sec</th>\n</tr>\n<tr>\n<td>:α</td>\n<td>40.4951</td>\n<td>6.30134</td>\n<td>0.140902</td>\n<td>0.374455</td>\n<td>233.031</td>\n<td>1.00203</td>\n<td>1.78922</td>\n</tr>\n<tr>\n<td>Symbol(\"β[1]\")</td>\n<td>2.67342</td>\n<td>6.24783</td>\n<td>0.139706</td>\n<td>0.410371</td>\n<td>171.592</td>\n<td>1.00809</td>\n<td>1.31748</td>\n</tr>\n<tr>\n<td>Symbol(\"β[2]\")</td>\n<td>0.470998</td>\n<td>0.0667889</td>\n<td>0.00149344</td>\n<td>0.00390309</td>\n<td>238.287</td>\n<td>1.0016</td>\n<td>1.82957</td>\n</tr>\n<tr>\n<td>Symbol(\"β[3]\")</td>\n<td>0.0135269</td>\n<td>0.0654307</td>\n<td>0.00146308</td>\n<td>0.00421617</td>\n<td>176.262</td>\n<td>1.00659</td>\n<td>1.35334</td>\n</tr>\n<tr>\n<td>:σ</td>\n<td>6.16788</td>\n<td>0.456312</td>\n<td>0.0102034</td>\n<td>0.0174061</td>\n<td>843.699</td>\n<td>0.999903</td>\n<td>6.47794</td>\n</tr>\n<tr>\n<td>:ν</td>\n<td>1.04776</td>\n<td>0.103145</td>\n<td>0.00230639</td>\n<td>0.00372788</td>\n<td>766.891</td>\n<td>0.999831</td>\n<td>5.8882</td>\n</tr>\n</table>\n\n\n\n<div class=\"markdown\"><h2>References</h2>\n<p>Gelman, A., &amp; Hill, J. &#40;2007&#41;. Data analysis using regression and multilevel/hierarchical models. Cambridge university press.</p>\n</div>\n\n<!-- PlutoStaticHTML.End -->","category":"page"},{"location":"tutorials/negative_binomial_regression/#Negative-Binomial-Regression","page":"Negative Binomial Regression","title":"Negative Binomial Regression","text":"","category":"section"},{"location":"tutorials/negative_binomial_regression/","page":"Negative Binomial Regression","title":"Negative Binomial Regression","text":"# Auto generated file. Do not modify.","category":"page"},{"location":"tutorials/negative_binomial_regression/","page":"Negative Binomial Regression","title":"Negative Binomial Regression","text":"<!-- PlutoStaticHTML.Begin -->\n<!--\n    # This information is used for caching.\n    [PlutoStaticHTML.State]\n    input_sha = \"0e6d6b517034002653a88b576cd3b1b8f1ff2fe1df35d5544843bb3d983777c2\"\n    julia_version = \"1.6.5\"\n-->\n\n\n\n\n<div class=\"markdown\"><p>For our example on <strong>Negative Binomial Regression</strong>, let&#39;s use a famous dataset called <code>roaches</code> &#40;Gelman &amp; Hill, 2007&#41;, which is data on the efficacy of a pest management system at reducing the number of roaches in urban apartments. It has 262 observations and the following variables:</p>\n<ul>\n<li><p><code>y</code> – number of roaches caught.</p>\n</li>\n<li><p><code>roach1</code> – pretreatment number of roaches.</p>\n</li>\n<li><p><code>treatment</code> – binary/dummy &#40;0 or 1&#41; for treatment indicator.</p>\n</li>\n<li><p><code>senior</code> – binary/dummy &#40;0 or 1&#41; for only elderly residents in building.</p>\n</li>\n<li><p><code>exposure2</code> – number of days for which the roach traps were used</p>\n</li>\n</ul>\n</div>\n\n<pre><code class=\"language-julia\">using CSV</code></pre>\n\n\n<pre><code class=\"language-julia\">using DataFrames</code></pre>\n\n\n<pre><code class=\"language-julia\">url = \"https://github.com/TuringLang/TuringGLM.jl/raw/main/data/roaches.csv\";</code></pre>\n\n\n<pre><code class=\"language-julia\">roaches = CSV.read(download(url), DataFrame)</code></pre>\n<table>\n<tr>\n<th>y</th>\n<th>roach1</th>\n<th>treatment</th>\n<th>senior</th>\n<th>exposure2</th>\n</tr>\n<tr>\n<td>153</td>\n<td>308.0</td>\n<td>1</td>\n<td>0</td>\n<td>0.8</td>\n</tr>\n<tr>\n<td>127</td>\n<td>331.25</td>\n<td>1</td>\n<td>0</td>\n<td>0.6</td>\n</tr>\n<tr>\n<td>7</td>\n<td>1.67</td>\n<td>1</td>\n<td>0</td>\n<td>1.0</td>\n</tr>\n<tr>\n<td>7</td>\n<td>3.0</td>\n<td>1</td>\n<td>0</td>\n<td>1.0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>2.0</td>\n<td>1</td>\n<td>0</td>\n<td>1.14286</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0.0</td>\n<td>1</td>\n<td>0</td>\n<td>1.0</td>\n</tr>\n<tr>\n<td>73</td>\n<td>70.0</td>\n<td>1</td>\n<td>0</td>\n<td>0.8</td>\n</tr>\n<tr>\n<td>24</td>\n<td>64.56</td>\n<td>1</td>\n<td>0</td>\n<td>1.14286</td>\n</tr>\n<tr>\n<td>2</td>\n<td>1.0</td>\n<td>0</td>\n<td>0</td>\n<td>1.0</td>\n</tr>\n<tr>\n<td>2</td>\n<td>14.0</td>\n<td>0</td>\n<td>0</td>\n<td>1.14286</td>\n</tr>\n<tr>\n<td>...</td>\n</tr>\n<tr>\n<td>8</td>\n<td>0.0</td>\n<td>0</td>\n<td>1</td>\n<td>1.0</td>\n</tr>\n</table>\n\n\n<pre><code class=\"language-julia\">using TuringGLM</code></pre>\n\n\n\n<div class=\"markdown\"><p>Using <code>y</code> as dependent variable and <code>roach1</code>, <code>treatment</code>, and <code>senior</code> as independent variables:</p>\n</div>\n\n<pre><code class=\"language-julia\">fm = @formula(y ~ roach1 + treatment + senior)</code></pre>\n<pre><code class=\"code-output\">FormulaTerm\nResponse:\n  y(unknown)\nPredictors:\n  roach1(unknown)\n  treatment(unknown)\n  senior(unknown)</code></pre>\n\n\n<div class=\"markdown\"><p>We instantiate our model with <code>turing_model</code> passing a third argument <code>NegBin&#40;&#41;</code> to indicate that the model is a negative binomial regression:</p>\n</div>\n\n<pre><code class=\"language-julia\">model = turing_model(fm, roaches, NegBin());</code></pre>\n\n\n<pre><code class=\"language-julia\">chn = sample(model, NUTS(), 2_000);</code></pre>\n\n\n<pre><code class=\"language-julia\">describe(chn)[1]</code></pre>\n<table>\n<tr>\n<th>parameters</th>\n<th>mean</th>\n<th>std</th>\n<th>naive_se</th>\n<th>mcse</th>\n<th>ess</th>\n<th>rhat</th>\n<th>ess_per_sec</th>\n</tr>\n<tr>\n<td>:α</td>\n<td>2.83105</td>\n<td>0.137306</td>\n<td>0.00307026</td>\n<td>0.00382226</td>\n<td>1170.85</td>\n<td>1.00033</td>\n<td>11.8479</td>\n</tr>\n<tr>\n<td>Symbol(\"β[1]\")</td>\n<td>0.0125777</td>\n<td>0.001532</td>\n<td>3.42565e-5</td>\n<td>2.90612e-5</td>\n<td>2430.25</td>\n<td>0.999585</td>\n<td>24.5919</td>\n</tr>\n<tr>\n<td>Symbol(\"β[2]\")</td>\n<td>-0.716949</td>\n<td>0.148222</td>\n<td>0.00331434</td>\n<td>0.00402054</td>\n<td>1356.12</td>\n<td>1.00042</td>\n<td>13.7227</td>\n</tr>\n<tr>\n<td>Symbol(\"β[3]\")</td>\n<td>-0.326959</td>\n<td>0.158346</td>\n<td>0.00354072</td>\n<td>0.00423644</td>\n<td>1449.96</td>\n<td>1.00012</td>\n<td>14.6723</td>\n</tr>\n<tr>\n<td>:ϕ⁻</td>\n<td>1.40614</td>\n<td>0.0792582</td>\n<td>0.00177227</td>\n<td>0.00217543</td>\n<td>1274.37</td>\n<td>1.0007</td>\n<td>12.8955</td>\n</tr>\n</table>\n\n\n\n<div class=\"markdown\"><h2>References</h2>\n<p>Gelman, A., &amp; Hill, J. &#40;2007&#41;. Data analysis using regression and multilevel/hierarchical models. Cambridge university press.</p>\n</div>\n\n<!-- PlutoStaticHTML.End -->","category":"page"},{"location":"tutorials/custom_priors/#Custom-Priors","page":"Custom Priors","title":"Custom Priors","text":"","category":"section"},{"location":"tutorials/custom_priors/","page":"Custom Priors","title":"Custom Priors","text":"# Auto generated file. Do not modify.","category":"page"},{"location":"tutorials/custom_priors/","page":"Custom Priors","title":"Custom Priors","text":"<!-- PlutoStaticHTML.Begin -->\n<!--\n    # This information is used for caching.\n    [PlutoStaticHTML.State]\n    input_sha = \"ec057d0889b7f52703e45c4e6ca14af7e0ad758bdb3a5d33dfeba709366fc053\"\n    julia_version = \"1.6.5\"\n-->\n\n\n\n\n<div class=\"markdown\"><p>Let&#39;s cover the <strong>Linear Regression</strong> example with the <code>kidiq</code> dataset &#40;Gelman &amp; Hill, 2007&#41;, which is data from a survey of adult American women and their respective children. Dated from 2007, it has 434 observations and 4 variables:</p>\n<ul>\n<li><p><code>kid_score</code>: child&#39;s IQ</p>\n</li>\n<li><p><code>mom_hs</code>: binary/dummy &#40;0 or 1&#41; if the child&#39;s mother has a high school diploma</p>\n</li>\n<li><p><code>mom_iq</code>: mother&#39;s IQ</p>\n</li>\n<li><p><code>mom_age</code>: mother&#39;s age</p>\n</li>\n</ul>\n</div>\n\n<pre><code class=\"language-julia\">using CSV</code></pre>\n\n\n<pre><code class=\"language-julia\">using DataFrames</code></pre>\n\n\n<pre><code class=\"language-julia\">url = \"https://github.com/TuringLang/TuringGLM.jl/raw/main/data/kidiq.csv\"</code></pre>\n<pre><code class=\"code-output\">\"https://github.com/TuringLang/TuringGLM.jl/raw/main/data/kidiq.csv\"</code></pre>\n\n<pre><code class=\"language-julia\">kidiq = CSV.read(download(url), DataFrame)</code></pre>\n<table>\n<tr>\n<th>kid_score</th>\n<th>mom_hs</th>\n<th>mom_iq</th>\n<th>mom_age</th>\n</tr>\n<tr>\n<td>65</td>\n<td>1</td>\n<td>121.118</td>\n<td>27</td>\n</tr>\n<tr>\n<td>98</td>\n<td>1</td>\n<td>89.3619</td>\n<td>25</td>\n</tr>\n<tr>\n<td>85</td>\n<td>1</td>\n<td>115.443</td>\n<td>27</td>\n</tr>\n<tr>\n<td>83</td>\n<td>1</td>\n<td>99.4496</td>\n<td>25</td>\n</tr>\n<tr>\n<td>115</td>\n<td>1</td>\n<td>92.7457</td>\n<td>27</td>\n</tr>\n<tr>\n<td>98</td>\n<td>0</td>\n<td>107.902</td>\n<td>18</td>\n</tr>\n<tr>\n<td>69</td>\n<td>1</td>\n<td>138.893</td>\n<td>20</td>\n</tr>\n<tr>\n<td>106</td>\n<td>1</td>\n<td>125.145</td>\n<td>23</td>\n</tr>\n<tr>\n<td>102</td>\n<td>1</td>\n<td>81.6195</td>\n<td>24</td>\n</tr>\n<tr>\n<td>95</td>\n<td>1</td>\n<td>95.0731</td>\n<td>19</td>\n</tr>\n<tr>\n<td>...</td>\n</tr>\n<tr>\n<td>70</td>\n<td>1</td>\n<td>91.2533</td>\n<td>25</td>\n</tr>\n</table>\n\n\n<pre><code class=\"language-julia\">using TuringGLM</code></pre>\n\n\n\n<div class=\"markdown\"><p>Using <code>kid_score</code> as dependent variable and <code>mom_hs</code> along with <code>mom_iq</code> as independent variables with a moderation &#40;interaction&#41; effect:</p>\n</div>\n\n<pre><code class=\"language-julia\">fm = @formula(kid_score ~ mom_hs * mom_iq)</code></pre>\n<pre><code class=\"code-output\">FormulaTerm\nResponse:\n  kid_score(unknown)\nPredictors:\n  mom_hs(unknown)\n  mom_iq(unknown)\n  mom_hs(unknown) & mom_iq(unknown)</code></pre>\n\n\n<div class=\"markdown\"><p>Let&#39;s create our CustomPrior object. No need for the third &#40;auxiliary&#41; prior for this model so we leave it as <code>nothing</code>:</p>\n</div>\n\n<pre><code class=\"language-julia\">priors = CustomPrior(Normal(0, 2.5), Normal(10, 20), nothing);</code></pre>\n\n\n\n<div class=\"markdown\"><p>We instantiate our model with <code>turing_model</code> without specifying any model, thus the default model will be used: <code>Gaussian&#40;&#41;</code>. Notice that we are specifying the <code>priors</code> keyword argument:</p>\n</div>\n\n<pre><code class=\"language-julia\">model = turing_model(fm, kidiq; priors);</code></pre>\n\n\n<pre><code class=\"language-julia\">chn = sample(model, NUTS(), 2_000);</code></pre>\n\n\n<pre><code class=\"language-julia\">describe(chn)[1]</code></pre>\n<table>\n<tr>\n<th>parameters</th>\n<th>mean</th>\n<th>std</th>\n<th>naive_se</th>\n<th>mcse</th>\n<th>ess</th>\n<th>rhat</th>\n<th>ess_per_sec</th>\n</tr>\n<tr>\n<td>:α</td>\n<td>26.8896</td>\n<td>5.14325</td>\n<td>0.115007</td>\n<td>0.185875</td>\n<td>594.353</td>\n<td>1.00264</td>\n<td>5.99872</td>\n</tr>\n<tr>\n<td>Symbol(\"β[1]\")</td>\n<td>2.30302</td>\n<td>2.4308</td>\n<td>0.0543544</td>\n<td>0.0847435</td>\n<td>724.863</td>\n<td>0.9995</td>\n<td>7.31594</td>\n</tr>\n<tr>\n<td>Symbol(\"β[2]\")</td>\n<td>0.558401</td>\n<td>0.0572571</td>\n<td>0.00128031</td>\n<td>0.0020365</td>\n<td>583.667</td>\n<td>1.00277</td>\n<td>5.89087</td>\n</tr>\n<tr>\n<td>Symbol(\"β[3]\")</td>\n<td>0.0278592</td>\n<td>0.0309043</td>\n<td>0.000691041</td>\n<td>0.0010472</td>\n<td>714.686</td>\n<td>0.999576</td>\n<td>7.21322</td>\n</tr>\n<tr>\n<td>:σ</td>\n<td>14.0911</td>\n<td>0.345682</td>\n<td>0.0077297</td>\n<td>0.0098875</td>\n<td>1124.57</td>\n<td>1.00009</td>\n<td>11.3501</td>\n</tr>\n</table>\n\n\n\n<div class=\"markdown\"><h2>References</h2>\n<p>Gelman, A., &amp; Hill, J. &#40;2007&#41;. Data analysis using regression and multilevel/hierarchical models. Cambridge university press.</p>\n</div>\n\n<!-- PlutoStaticHTML.End -->","category":"page"},{"location":"tutorials/hierarchical_models/#Hierarchical-Models","page":"Hierarchical Models","title":"Hierarchical Models","text":"","category":"section"},{"location":"tutorials/hierarchical_models/","page":"Hierarchical Models","title":"Hierarchical Models","text":"# Auto generated file. Do not modify.","category":"page"},{"location":"tutorials/hierarchical_models/","page":"Hierarchical Models","title":"Hierarchical Models","text":"<!-- PlutoStaticHTML.Begin -->\n<!--\n    # This information is used for caching.\n    [PlutoStaticHTML.State]\n    input_sha = \"63f61b21aeec84418409671b11c988f589badd28bf266587a694783593546cad\"\n    julia_version = \"1.6.5\"\n-->\n\n\n\n\n<div class=\"markdown\"><p>Currently, TuringGLM only supports hierarchical models with a single random-intercept. This is done by using the <code>&#40;1 | group&#41;</code> inside the <code>@formula</code> macro.</p>\n<p>For our <strong>Hierarchical Model</strong> example, let&#39;s use a famous dataset called <code>cheese</code> &#40;Boatwright, McCulloch &amp; Rossi, 1999&#41;, which is data from cheese ratings. A group of 10 rural and 10 urban raters rated 4 types of different cheeses &#40;A, B, C and D&#41; in two samples. So we have <span class=\"tex\">$4 \\cdot 20 \\cdot 2 &#61; 160$</span> observations and 4 variables:</p>\n<ul>\n<li><p><code>cheese</code>: type of cheese from <code>A</code> to <code>D</code></p>\n</li>\n<li><p><code>rater</code>: id of the rater from <code>1</code> to <code>10</code></p>\n</li>\n<li><p><code>background</code>: type of rater, either <code>rural</code> or <code>urban</code></p>\n</li>\n<li><p><code>y</code>: rating of the cheese</p>\n</li>\n</ul>\n</div>\n\n<pre><code class=\"language-julia\">using CSV</code></pre>\n\n\n<pre><code class=\"language-julia\">using DataFrames</code></pre>\n\n\n<pre><code class=\"language-julia\">url = \"https://github.com/TuringLang/TuringGLM.jl/raw/main/data/cheese.csv\";</code></pre>\n\n\n<pre><code class=\"language-julia\">cheese = CSV.read(download(url), DataFrame)</code></pre>\n<table>\n<tr>\n<th>cheese</th>\n<th>rater</th>\n<th>background</th>\n<th>y</th>\n</tr>\n<tr>\n<td>\"A\"</td>\n<td>1</td>\n<td>\"rural\"</td>\n<td>67</td>\n</tr>\n<tr>\n<td>\"A\"</td>\n<td>1</td>\n<td>\"rural\"</td>\n<td>66</td>\n</tr>\n<tr>\n<td>\"B\"</td>\n<td>1</td>\n<td>\"rural\"</td>\n<td>51</td>\n</tr>\n<tr>\n<td>\"B\"</td>\n<td>1</td>\n<td>\"rural\"</td>\n<td>53</td>\n</tr>\n<tr>\n<td>\"C\"</td>\n<td>1</td>\n<td>\"rural\"</td>\n<td>75</td>\n</tr>\n<tr>\n<td>\"C\"</td>\n<td>1</td>\n<td>\"rural\"</td>\n<td>70</td>\n</tr>\n<tr>\n<td>\"D\"</td>\n<td>1</td>\n<td>\"rural\"</td>\n<td>68</td>\n</tr>\n<tr>\n<td>\"D\"</td>\n<td>1</td>\n<td>\"rural\"</td>\n<td>66</td>\n</tr>\n<tr>\n<td>\"A\"</td>\n<td>2</td>\n<td>\"rural\"</td>\n<td>76</td>\n</tr>\n<tr>\n<td>\"A\"</td>\n<td>2</td>\n<td>\"rural\"</td>\n<td>76</td>\n</tr>\n<tr>\n<td>...</td>\n</tr>\n<tr>\n<td>\"D\"</td>\n<td>10</td>\n<td>\"urban\"</td>\n<td>83</td>\n</tr>\n</table>\n\n\n<pre><code class=\"language-julia\">using TuringGLM</code></pre>\n\n\n\n<div class=\"markdown\"><p>Using <code>y</code> as dependent variable and <code>background</code> is independent variable with a varying-intercept per <code>cheese</code> type:</p>\n</div>\n\n<pre><code class=\"language-julia\">fm = @formula(y ~ (1 | cheese) + background)</code></pre>\n<pre><code class=\"code-output\">FormulaTerm\nResponse:\n  y(unknown)\nPredictors:\n  (cheese)->1 | cheese\n  background(unknown)</code></pre>\n\n\n<div class=\"markdown\"><p>We instantiate our model with <code>turing_model</code> without specifying any model, thus the default model will be used: <code>Gaussian&#40;&#41;</code></p>\n</div>\n\n<pre><code class=\"language-julia\">model = turing_model(fm, cheese);</code></pre>\n\n\n<pre><code class=\"language-julia\">chn = sample(model, NUTS(), 2_000);</code></pre>\n\n\n<pre><code class=\"language-julia\">describe(chn)[1]</code></pre>\n<table>\n<tr>\n<th>parameters</th>\n<th>mean</th>\n<th>std</th>\n<th>naive_se</th>\n<th>mcse</th>\n<th>ess</th>\n<th>rhat</th>\n<th>ess_per_sec</th>\n</tr>\n<tr>\n<td>:α</td>\n<td>68.1503</td>\n<td>5.50245</td>\n<td>0.123038</td>\n<td>0.225954</td>\n<td>577.421</td>\n<td>0.999502</td>\n<td>8.29461</td>\n</tr>\n<tr>\n<td>Symbol(\"β[1]\")</td>\n<td>6.89987</td>\n<td>0.9572</td>\n<td>0.0214036</td>\n<td>0.0242747</td>\n<td>1431.69</td>\n<td>0.999935</td>\n<td>20.5662</td>\n</tr>\n<tr>\n<td>:σ</td>\n<td>5.88769</td>\n<td>0.254418</td>\n<td>0.00568896</td>\n<td>0.00602049</td>\n<td>1572.45</td>\n<td>1.0002</td>\n<td>22.5882</td>\n</tr>\n<tr>\n<td>:τ</td>\n<td>11.7821</td>\n<td>4.58883</td>\n<td>0.102609</td>\n<td>0.17653</td>\n<td>607.279</td>\n<td>1.00683</td>\n<td>8.72352</td>\n</tr>\n<tr>\n<td>Symbol(\"zⱼ[1]\")</td>\n<td>0.32241</td>\n<td>0.492822</td>\n<td>0.0110198</td>\n<td>0.0203907</td>\n<td>581.191</td>\n<td>1.00001</td>\n<td>8.34877</td>\n</tr>\n<tr>\n<td>Symbol(\"zⱼ[2]\")</td>\n<td>-1.42124</td>\n<td>0.657373</td>\n<td>0.0146993</td>\n<td>0.0232415</td>\n<td>619.884</td>\n<td>1.00287</td>\n<td>8.90459</td>\n</tr>\n<tr>\n<td>Symbol(\"zⱼ[3]\")</td>\n<td>0.784052</td>\n<td>0.56081</td>\n<td>0.0125401</td>\n<td>0.0231927</td>\n<td>611.067</td>\n<td>1.00149</td>\n<td>8.77794</td>\n</tr>\n<tr>\n<td>Symbol(\"zⱼ[4]\")</td>\n<td>0.0842721</td>\n<td>0.475274</td>\n<td>0.0106274</td>\n<td>0.0189922</td>\n<td>573.656</td>\n<td>0.999717</td>\n<td>8.24053</td>\n</tr>\n</table>\n\n\n\n<div class=\"markdown\"><h2>References</h2>\n<p>Boatwright, P., McCulloch, R., &amp; Rossi, P. &#40;1999&#41;. Account-level modeling for trade promotion: An application of a constrained parameter hierarchical model. Journal of the American Statistical Association, 94&#40;448&#41;, 1063–1073.</p>\n</div>\n\n<!-- PlutoStaticHTML.End -->","category":"page"},{"location":"tutorials/linear_regression/#Linear-Regression","page":"Linear Regression","title":"Linear Regression","text":"","category":"section"},{"location":"tutorials/linear_regression/","page":"Linear Regression","title":"Linear Regression","text":"# Auto generated file. Do not modify.","category":"page"},{"location":"tutorials/linear_regression/","page":"Linear Regression","title":"Linear Regression","text":"<!-- PlutoStaticHTML.Begin -->\n<!--\n    # This information is used for caching.\n    [PlutoStaticHTML.State]\n    input_sha = \"1f50363bb24578871a8134391d6795f6feb2062f622e178dbd2141a0efd16369\"\n    julia_version = \"1.6.5\"\n-->\n\n\n\n\n<div class=\"markdown\"><p>Let&#39;s cover <strong>Linear Regression</strong> with a famous dataset called <code>kidiq</code> &#40;Gelman &amp; Hill, 2007&#41;, which is data from a survey of adult American women and their respective children. Dated from 2007, it has 434 observations and 4 variables:</p>\n<ul>\n<li><p><code>kid_score</code>: child&#39;s IQ</p>\n</li>\n<li><p><code>mom_hs</code>: binary/dummy &#40;0 or 1&#41; if the child&#39;s mother has a high school diploma</p>\n</li>\n<li><p><code>mom_iq</code>: mother&#39;s IQ</p>\n</li>\n<li><p><code>mom_age</code>: mother&#39;s age</p>\n</li>\n</ul>\n<p>For the purposes of this tutorial, we download the dataset from the TuringGLM repository:</p>\n</div>\n\n<pre><code class=\"language-julia\">using CSV</code></pre>\n\n\n<pre><code class=\"language-julia\">using DataFrames</code></pre>\n\n\n<pre><code class=\"language-julia\">using TuringGLM</code></pre>\n\n\n<pre><code class=\"language-julia\">url = \"https://github.com/TuringLang/TuringGLM.jl/raw/main/data/kidiq.csv\";</code></pre>\n\n\n<pre><code class=\"language-julia\">kidiq = CSV.read(download(url), DataFrame)</code></pre>\n<table>\n<tr>\n<th>kid_score</th>\n<th>mom_hs</th>\n<th>mom_iq</th>\n<th>mom_age</th>\n</tr>\n<tr>\n<td>65</td>\n<td>1</td>\n<td>121.118</td>\n<td>27</td>\n</tr>\n<tr>\n<td>98</td>\n<td>1</td>\n<td>89.3619</td>\n<td>25</td>\n</tr>\n<tr>\n<td>85</td>\n<td>1</td>\n<td>115.443</td>\n<td>27</td>\n</tr>\n<tr>\n<td>83</td>\n<td>1</td>\n<td>99.4496</td>\n<td>25</td>\n</tr>\n<tr>\n<td>115</td>\n<td>1</td>\n<td>92.7457</td>\n<td>27</td>\n</tr>\n<tr>\n<td>98</td>\n<td>0</td>\n<td>107.902</td>\n<td>18</td>\n</tr>\n<tr>\n<td>69</td>\n<td>1</td>\n<td>138.893</td>\n<td>20</td>\n</tr>\n<tr>\n<td>106</td>\n<td>1</td>\n<td>125.145</td>\n<td>23</td>\n</tr>\n<tr>\n<td>102</td>\n<td>1</td>\n<td>81.6195</td>\n<td>24</td>\n</tr>\n<tr>\n<td>95</td>\n<td>1</td>\n<td>95.0731</td>\n<td>19</td>\n</tr>\n<tr>\n<td>...</td>\n</tr>\n<tr>\n<td>70</td>\n<td>1</td>\n<td>91.2533</td>\n<td>25</td>\n</tr>\n</table>\n\n\n\n<div class=\"markdown\"><p>Using <code>kid_score</code> as dependent variable and <code>mom_hs</code> along with <code>mom_iq</code> as independent variables with a moderation &#40;interaction&#41; effect:</p>\n</div>\n\n<pre><code class=\"language-julia\">fm = @formula(kid_score ~ mom_hs * mom_iq)</code></pre>\n<pre><code class=\"code-output\">FormulaTerm\nResponse:\n  kid_score(unknown)\nPredictors:\n  mom_hs(unknown)\n  mom_iq(unknown)\n  mom_hs(unknown) & mom_iq(unknown)</code></pre>\n\n\n<div class=\"markdown\"><p>Next, we instantiate our model with <code>turing_model</code> without specifying any model, thus the default model will be used: <code>Gaussian&#40;&#41;</code>:</p>\n</div>\n\n<pre><code class=\"language-julia\">model = turing_model(fm, kidiq);</code></pre>\n\n\n<pre><code class=\"language-julia\">n_samples = 2_000;</code></pre>\n\n\n\n<div class=\"markdown\"><p>This model is a valid Turing model, which we can pass to the default <code>sample</code> function from Turing to get our parameter estimates. We use the <code>NUTS</code> sampler with 2000 samples.</p>\n</div>\n\n<pre><code class=\"language-julia\">chn = sample(model, NUTS(), n_samples);</code></pre>\n\n\n<pre><code class=\"language-julia\">describe(chn)[1]</code></pre>\n<table>\n<tr>\n<th>parameters</th>\n<th>mean</th>\n<th>std</th>\n<th>naive_se</th>\n<th>mcse</th>\n<th>ess</th>\n<th>rhat</th>\n<th>ess_per_sec</th>\n</tr>\n<tr>\n<td>:α</td>\n<td>29.967</td>\n<td>6.25126</td>\n<td>0.139782</td>\n<td>0.382364</td>\n<td>272.394</td>\n<td>1.00041</td>\n<td>2.67019</td>\n</tr>\n<tr>\n<td>Symbol(\"β[1]\")</td>\n<td>1.68709</td>\n<td>5.01912</td>\n<td>0.112231</td>\n<td>0.413271</td>\n<td>146.84</td>\n<td>1.00074</td>\n<td>1.43942</td>\n</tr>\n<tr>\n<td>Symbol(\"β[2]\")</td>\n<td>0.525768</td>\n<td>0.069345</td>\n<td>0.0015506</td>\n<td>0.00414656</td>\n<td>281.991</td>\n<td>1.00018</td>\n<td>2.76427</td>\n</tr>\n<tr>\n<td>Symbol(\"β[3]\")</td>\n<td>0.0370346</td>\n<td>0.0559105</td>\n<td>0.0012502</td>\n<td>0.00429679</td>\n<td>162.437</td>\n<td>1.00028</td>\n<td>1.59231</td>\n</tr>\n<tr>\n<td>:σ</td>\n<td>14.0945</td>\n<td>0.336179</td>\n<td>0.0075172</td>\n<td>0.011216</td>\n<td>786.454</td>\n<td>1.0022</td>\n<td>7.70935</td>\n</tr>\n</table>\n\n\n\n<div class=\"markdown\"><h2>References</h2>\n<p>Gelman, A., &amp; Hill, J. &#40;2007&#41;. Data analysis using regression and multilevel/hierarchical models. Cambridge university press.</p>\n</div>\n\n<!-- PlutoStaticHTML.End -->","category":"page"},{"location":"#TuringGLM","page":"Home","title":"TuringGLM","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for TuringGLM. Please file an issue  if you run into any problems.","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TuringGLM makes easy to specify Bayesian Generalized Linear Models using the formula syntax and returns an instantiated Turing model.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Heavily inspired by brms (uses RStan or CmdStanR) and bambi (uses PyMC3).","category":"page"},{"location":"#@formula","page":"Home","title":"@formula","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The @formula macro is extended from StatsModels.jl along with  MixedModels.jl for the random-effects (a.k.a. group-level predictors).","category":"page"},{"location":"","page":"Home","title":"Home","text":"The syntax is done by using the @formula macro and then specifying the dependent variable followed by a tilde ~ then the independent variables separated by a plus sign +.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Example:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@formula(y ~ x1 + x2 + x3)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Moderations/interactions can be specified with the asterisk sign *, e.g. x1 * x2. This will be expanded to x1 + x2 + x1:x2, which, following the principle of hierarchy, the main effects must also be added along with the interaction effects. Here x1:x2 means that the values of x1 will be multiplied (interacted) with the values of x2.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Random-effects (a.k.a. group-level effects) can be specified with the (term | group) inside the @formula, where term is the independent variable and group is the categorical representation (i.e., either a column of Strings or a CategoricalArray in data). You can specify a random-intercept with (1 | group).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Example:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@formula(y ~ (1 | group) + x1)","category":"page"},{"location":"#Data","page":"Home","title":"Data","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TuringGLM supports any Tables.jl-compatible data interface. The most popular ones are DataFrames and NamedTuples.","category":"page"},{"location":"#Supported-Models","page":"Home","title":"Supported Models","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TuringGLM supports non-hiearchical and hierarchical models. For hierarchical models, only single random-intercept hierarchical models are supported.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For likelihoods, TuringGLM.jl supports:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Gaussian() (the default if not specified): linear regression\nStudent(): robust linear regression\nLogistic(): logistic regression\nPois(): Poisson count data regression\nNegBin(): negative binomial robust count data regression","category":"page"},{"location":"#Tutorials","page":"Home","title":"Tutorials","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Take a look at the tutorials for all supported likelihood and models:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"tutorials/linear_regression.md\",\n    \"tutorials/logistic_regression.md\",\n    \"tutorials/poisson_regression.md\",\n    \"tutorials/negativebinomial_regression.md\",\n    \"tutorials/robust_regression.md\",\n    \"tutorials/hierarchical_models.md\",\n    \"tutorials/custom_priors.md\"\n]\nDepth = 1","category":"page"},{"location":"tutorials/logistic_regression/#Logistic-Regression","page":"Logistic Regression","title":"Logistic Regression","text":"","category":"section"},{"location":"tutorials/logistic_regression/","page":"Logistic Regression","title":"Logistic Regression","text":"# Auto generated file. Do not modify.","category":"page"},{"location":"tutorials/logistic_regression/","page":"Logistic Regression","title":"Logistic Regression","text":"<!-- PlutoStaticHTML.Begin -->\n<!--\n    # This information is used for caching.\n    [PlutoStaticHTML.State]\n    input_sha = \"508eb3c5bb65e7fe0a1e2c675803a38d8f8ad41266a99ea384344d81632f4ec4\"\n    julia_version = \"1.6.5\"\n-->\n\n\n\n\n<div class=\"markdown\"><p>For our tutorial on <strong>Logistic Regression</strong>, let&#39;s use a famous dataset called <code>wells</code> &#40;Gelman &amp; Hill, 2007&#41;, which is data from a survey of 3,200 residents in a small area of Bangladesh suffering from arsenic contamination of groundwater. Respondents with elevated arsenic levels in their wells had been encouraged to switch their water source to a safe public or private well in the nearby area and the survey was conducted several years later to learn which of the affected residents had switched wells. It has 3,200 observations and the following variables:</p>\n<ul>\n<li><p><code>switch</code> – binary/dummy &#40;0 or 1&#41; for well-switching.</p>\n</li>\n<li><p><code>arsenic</code> – arsenic level in respondent&#39;s well.</p>\n</li>\n<li><p><code>dist</code> – distance &#40;meters&#41; from the respondent&#39;s house to the nearest well with safe drinking water.</p>\n</li>\n<li><p><code>association</code> – binary/dummy &#40;0 or 1&#41; if member&#40;s&#41; of household participate in community organizations.</p>\n</li>\n<li><p><code>educ</code> – years of education &#40;head of household&#41;.</p>\n</li>\n</ul>\n</div>\n\n<pre><code class=\"language-julia\">using CSV</code></pre>\n\n\n<pre><code class=\"language-julia\">using DataFrames</code></pre>\n\n\n<pre><code class=\"language-julia\">using TuringGLM</code></pre>\n\n\n<pre><code class=\"language-julia\">url = \"https://github.com/TuringLang/TuringGLM.jl/raw/main/data/wells.csv\";</code></pre>\n\n\n<pre><code class=\"language-julia\">wells = CSV.read(download(url), DataFrame)</code></pre>\n<table>\n<tr>\n<th>switch</th>\n<th>arsenic</th>\n<th>dist</th>\n<th>assoc</th>\n<th>educ</th>\n</tr>\n<tr>\n<td>1</td>\n<td>2.36</td>\n<td>16.826</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0.71</td>\n<td>47.322</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>2.07</td>\n<td>20.967</td>\n<td>0</td>\n<td>10</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1.15</td>\n<td>21.486</td>\n<td>0</td>\n<td>12</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1.1</td>\n<td>40.874</td>\n<td>1</td>\n<td>14</td>\n</tr>\n<tr>\n<td>1</td>\n<td>3.9</td>\n<td>69.518</td>\n<td>1</td>\n<td>9</td>\n</tr>\n<tr>\n<td>1</td>\n<td>2.97</td>\n<td>80.711</td>\n<td>1</td>\n<td>4</td>\n</tr>\n<tr>\n<td>1</td>\n<td>3.24</td>\n<td>55.146</td>\n<td>0</td>\n<td>10</td>\n</tr>\n<tr>\n<td>1</td>\n<td>3.28</td>\n<td>52.647</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>2.52</td>\n<td>75.072</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>...</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0.66</td>\n<td>20.844</td>\n<td>1</td>\n<td>5</td>\n</tr>\n</table>\n\n\n\n<div class=\"markdown\"><p>Using <code>switch</code> as dependent variable and <code>dist</code>, <code>arsenic</code>, <code>assoc</code>, and <code>educ</code> as independent variables:</p>\n</div>\n\n<pre><code class=\"language-julia\">fm = @formula(switch ~ dist + arsenic + assoc + educ)</code></pre>\n<pre><code class=\"code-output\">FormulaTerm\nResponse:\n  switch(unknown)\nPredictors:\n  dist(unknown)\n  arsenic(unknown)\n  assoc(unknown)\n  educ(unknown)</code></pre>\n\n\n<div class=\"markdown\"><p>Now we instantiate our model with <code>turing_model</code> passing a third argument <code>Logistic&#40;&#41;</code> to indicate that the model is a logistic regression:</p>\n</div>\n\n<pre><code class=\"language-julia\">model = turing_model(fm, wells, Logistic());</code></pre>\n\n\n<pre><code class=\"language-julia\">chn = sample(model, NUTS(), 2_000);</code></pre>\n\n\n<pre><code class=\"language-julia\">describe(chn)[1]</code></pre>\n<table>\n<tr>\n<th>parameters</th>\n<th>mean</th>\n<th>std</th>\n<th>naive_se</th>\n<th>mcse</th>\n<th>ess</th>\n<th>rhat</th>\n<th>ess_per_sec</th>\n</tr>\n<tr>\n<td>:α</td>\n<td>-0.158735</td>\n<td>0.100083</td>\n<td>0.00223792</td>\n<td>0.00281531</td>\n<td>1091.9</td>\n<td>0.999501</td>\n<td>7.26389</td>\n</tr>\n<tr>\n<td>Symbol(\"β[1]\")</td>\n<td>-0.0090063</td>\n<td>0.00107137</td>\n<td>2.39565e-5</td>\n<td>2.2892e-5</td>\n<td>2221.45</td>\n<td>1.00008</td>\n<td>14.7782</td>\n</tr>\n<tr>\n<td>Symbol(\"β[2]\")</td>\n<td>0.468352</td>\n<td>0.0417637</td>\n<td>0.000933866</td>\n<td>0.00120765</td>\n<td>1181.14</td>\n<td>0.999888</td>\n<td>7.85755</td>\n</tr>\n<tr>\n<td>Symbol(\"β[3]\")</td>\n<td>-0.124621</td>\n<td>0.0792361</td>\n<td>0.00177177</td>\n<td>0.00193331</td>\n<td>1387.64</td>\n<td>0.9995</td>\n<td>9.2313</td>\n</tr>\n<tr>\n<td>Symbol(\"β[4]\")</td>\n<td>0.0427641</td>\n<td>0.00952089</td>\n<td>0.000212894</td>\n<td>0.000307052</td>\n<td>1229.1</td>\n<td>0.999546</td>\n<td>8.17664</td>\n</tr>\n</table>\n\n\n\n<div class=\"markdown\"><h2>References</h2>\n<p>Gelman, A., &amp; Hill, J. &#40;2007&#41;. Data analysis using regression and multilevel/hierarchical models. Cambridge university press.</p>\n</div>\n\n<!-- PlutoStaticHTML.End -->","category":"page"},{"location":"tutorials/poisson_regression/#Poisson-Regression","page":"Poisson Regression","title":"Poisson Regression","text":"","category":"section"},{"location":"tutorials/poisson_regression/","page":"Poisson Regression","title":"Poisson Regression","text":"# Auto generated file. Do not modify.","category":"page"},{"location":"tutorials/poisson_regression/","page":"Poisson Regression","title":"Poisson Regression","text":"<!-- PlutoStaticHTML.Begin -->\n<!--\n    # This information is used for caching.\n    [PlutoStaticHTML.State]\n    input_sha = \"21486e92c12fe953052c606d656ae518497a22b0afcc978193c47949a50186a1\"\n    julia_version = \"1.6.5\"\n-->\n\n\n\n\n<div class=\"markdown\"><p>For our example on <strong>Poisson Regression</strong>, let&#39;s use a famous dataset called <code>roaches</code> &#40;Gelman &amp; Hill, 2007&#41;, which is data on the efficacy of a pest management system at reducing the number of roaches in urban apartments. It has 262 observations and the following variables:</p>\n<ul>\n<li><p><code>y</code> – number of roaches caught.</p>\n</li>\n<li><p><code>roach1</code> – pretreatment number of roaches.</p>\n</li>\n<li><p><code>treatment</code> – binary/dummy &#40;0 or 1&#41; for treatment indicator.</p>\n</li>\n<li><p><code>senior</code> – binary/dummy &#40;0 or 1&#41; for only elderly residents in building.</p>\n</li>\n<li><p><code>exposure2</code> – number of days for which the roach traps were used</p>\n</li>\n</ul>\n</div>\n\n<pre><code class=\"language-julia\">using CSV</code></pre>\n\n\n<pre><code class=\"language-julia\">using DataFrames</code></pre>\n\n\n<pre><code class=\"language-julia\">url = \"https://github.com/TuringLang/TuringGLM.jl/raw/main/data/roaches.csv\";</code></pre>\n\n\n<pre><code class=\"language-julia\">roaches = CSV.read(download(url), DataFrame)</code></pre>\n<table>\n<tr>\n<th>y</th>\n<th>roach1</th>\n<th>treatment</th>\n<th>senior</th>\n<th>exposure2</th>\n</tr>\n<tr>\n<td>153</td>\n<td>308.0</td>\n<td>1</td>\n<td>0</td>\n<td>0.8</td>\n</tr>\n<tr>\n<td>127</td>\n<td>331.25</td>\n<td>1</td>\n<td>0</td>\n<td>0.6</td>\n</tr>\n<tr>\n<td>7</td>\n<td>1.67</td>\n<td>1</td>\n<td>0</td>\n<td>1.0</td>\n</tr>\n<tr>\n<td>7</td>\n<td>3.0</td>\n<td>1</td>\n<td>0</td>\n<td>1.0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>2.0</td>\n<td>1</td>\n<td>0</td>\n<td>1.14286</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0.0</td>\n<td>1</td>\n<td>0</td>\n<td>1.0</td>\n</tr>\n<tr>\n<td>73</td>\n<td>70.0</td>\n<td>1</td>\n<td>0</td>\n<td>0.8</td>\n</tr>\n<tr>\n<td>24</td>\n<td>64.56</td>\n<td>1</td>\n<td>0</td>\n<td>1.14286</td>\n</tr>\n<tr>\n<td>2</td>\n<td>1.0</td>\n<td>0</td>\n<td>0</td>\n<td>1.0</td>\n</tr>\n<tr>\n<td>2</td>\n<td>14.0</td>\n<td>0</td>\n<td>0</td>\n<td>1.14286</td>\n</tr>\n<tr>\n<td>...</td>\n</tr>\n<tr>\n<td>8</td>\n<td>0.0</td>\n<td>0</td>\n<td>1</td>\n<td>1.0</td>\n</tr>\n</table>\n\n\n<pre><code class=\"language-julia\">using TuringGLM</code></pre>\n\n\n\n<div class=\"markdown\"><p>Using <code>y</code> as dependent variable and <code>roach1</code>, <code>treatment</code>, and <code>senior</code> as independent variables:</p>\n</div>\n\n<pre><code class=\"language-julia\">fm = @formula(y ~ roach1 + treatment + senior)</code></pre>\n<pre><code class=\"code-output\">FormulaTerm\nResponse:\n  y(unknown)\nPredictors:\n  roach1(unknown)\n  treatment(unknown)\n  senior(unknown)</code></pre>\n\n\n<div class=\"markdown\"><p>We instantiate our model with <code>turing_model</code> passing a third argument <code>Pois&#40;&#41;</code> to indicate that the model is a Poisson Regression</p>\n</div>\n\n<pre><code class=\"language-julia\">model = turing_model(fm, roaches, Pois());</code></pre>\n\n\n\n<div class=\"markdown\"><p>Sample the model using the <code>NUTS</code> sampler and 2,000 samples:</p>\n</div>\n\n<pre><code class=\"language-julia\">chn = sample(model, NUTS(), 2_000);</code></pre>\n\n\n<pre><code class=\"language-julia\">describe(chn)[1]</code></pre>\n<table>\n<tr>\n<th>parameters</th>\n<th>mean</th>\n<th>std</th>\n<th>naive_se</th>\n<th>mcse</th>\n<th>ess</th>\n<th>rhat</th>\n<th>ess_per_sec</th>\n</tr>\n<tr>\n<td>:α</td>\n<td>3.13601</td>\n<td>0.0222547</td>\n<td>0.000497631</td>\n<td>0.000702708</td>\n<td>1037.52</td>\n<td>0.999532</td>\n<td>11.7831</td>\n</tr>\n<tr>\n<td>Symbol(\"β[1]\")</td>\n<td>0.0064436</td>\n<td>8.65984e-5</td>\n<td>1.9364e-6</td>\n<td>2.43542e-6</td>\n<td>1712.74</td>\n<td>0.999688</td>\n<td>19.4514</td>\n</tr>\n<tr>\n<td>Symbol(\"β[2]\")</td>\n<td>-0.512794</td>\n<td>0.025478</td>\n<td>0.000569706</td>\n<td>0.000804248</td>\n<td>1007.55</td>\n<td>1.00002</td>\n<td>11.4427</td>\n</tr>\n<tr>\n<td>Symbol(\"β[3]\")</td>\n<td>-0.375081</td>\n<td>0.0360145</td>\n<td>0.000805309</td>\n<td>0.00130805</td>\n<td>835.705</td>\n<td>1.00005</td>\n<td>9.49104</td>\n</tr>\n</table>\n\n\n\n<div class=\"markdown\"><h2>References</h2>\n<p>Gelman, A., &amp; Hill, J. &#40;2007&#41;. Data analysis using regression and multilevel/hierarchical models. Cambridge university press.</p>\n</div>\n\n<!-- PlutoStaticHTML.End -->","category":"page"}]
}
